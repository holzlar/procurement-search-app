import streamlit as st
import pandas as pd
from datetime import datetime
from search_service import ProcurementSearchService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–∫—É–ø–æ–∫",
    page_icon="",
    layout="wide"
)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞
@st.cache_resource
def load_search_service():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ (–∫—ç—à–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)"""
    return ProcurementSearchService()

def format_currency(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º"""
    if pd.isna(amount) or amount is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    try:
        return f"{int(amount):,}".replace(",", " ") + " ‚Ç∏"
    except:
        return str(amount) + " ‚Ç∏"

def format_date(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    if pd.isna(date_str) or date_str is None:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    try:
        if isinstance(date_str, str):
            date_obj = pd.to_datetime(date_str)
        else:
            date_obj = date_str
        return date_obj.strftime("%d.%m.%Y")
    except:
        return str(date_str)

def truncate_text(text, max_length=100):
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º '...'"""
    if not text or pd.isna(text):
        return ""
    text = str(text)
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."

def get_similarity_level(score):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ö–æ–∂–µ—Å—Ç–∏"""
    if score >= 0.8:
        return "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è", "üü¢"
    elif score >= 0.7:
        return "–í—ã—Å–æ–∫–∞—è", "üü°"
    elif score >= 0.5:
        return "–°—Ä–µ–¥–Ω—è—è", "üü†"
    else:
        return "–ù–∏–∑–∫–∞—è", "üî¥"

def main():
    st.title("üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–∫—É–ø–æ–∫")
    st.markdown("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        search_service = load_search_service()
        available_etps = search_service.get_available_etps()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–∏—Å–∫–∞: {e}")
        st.stop()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ –∏ –∫–Ω–æ–ø–∫—É –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    search_col, button_col = st.columns([5, 1])

    with search_col:
        search_query = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            placeholder="–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...",
            label_visibility="collapsed"
        )

    with button_col:
        # –î–ª—è st.text_input –∫–Ω–æ–ø–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ –±–µ–∑ –¥–æ–ø. –æ—Ç—Å—Ç—É–ø–æ–≤
        search_button = st.button(
            "–ù–∞–π—Ç–∏", type="primary", use_container_width=True
        )

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª–µ–º, —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º 40%/60%
    col1, col2 = st.columns([2, 3])
    
    with col1:
        num_results = st.number_input(
            "üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", min_value=1, max_value=100, value=20, step=5,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—É–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
    
    with col2:
        if available_etps:
            selected_etps = st.multiselect(
                "üè¢ –§–∏–ª—å—Ç—Ä –ø–æ –≠–¢–ü:", options=available_etps, default=available_etps,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            )
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≠–¢–ü")
            selected_etps = []
    
    if search_button and search_query.strip():
        if not selected_etps:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≠–¢–ü –¥–ª—è –ø–æ–∏—Å–∫–∞")
        else:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–∫—É–ø–æ–∫..."):
                try:
                    results = search_service.search_similar_procurements(
                        query_text=search_query, limit=num_results, etp_filter=selected_etps,
                        similarity_threshold=0.5, initial_candidate_count=1000
                    )
                    
                    if results:
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–∫—É–ø–æ–∫")
                        
                        for i, procurement in enumerate(results, 1):
                            similarity_score = procurement.get('similarity_score', 0)
                            similarity_level, emoji = get_similarity_level(similarity_score)
                            
                            description_preview = truncate_text(procurement.get('description', ''), 80)
                            title = f"{emoji} {similarity_score:.1%} | {procurement.get('etp', '–ù/–î')} | {format_currency(procurement.get('price'))} | {description_preview}"
                            
                            with st.expander(title):
                                left_col, right_col = st.columns([2, 1])
                                
                                # --- –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê ---
                                with left_col:
                                    st.subheader("üìã –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏")
                                    st.write(procurement.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))

                                    st.subheader(f"‚ö°Ô∏è –ù–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity_score:.2f})")
                                    st.info(f"**{procurement.get('best_chunk_text', '')}**")
                                    
                                    st.subheader("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–µ–Ω–¥–µ—Ä–∞")
                                    participants = search_service.format_participants(procurement)
                                    if participants:
                                        winner = procurement.get('winner')
                                        df_participants = pd.DataFrame(participants, columns=["–£—á–∞—Å—Ç–Ω–∏–∫"])
                                        df_participants['–°—Ç–∞—Ç—É—Å'] = [
                                            'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å' if p == winner and p not in ['-', None, 'NaN'] else '–£—á–∞—Å—Ç–Ω–∏–∫' 
                                            for p in df_participants['–£—á–∞—Å—Ç–Ω–∏–∫']
                                        ]
                                        df_participants = df_participants[['–°—Ç–∞—Ç—É—Å', '–£—á–∞—Å—Ç–Ω–∏–∫']]
                                        st.table(df_participants)
                                    else:
                                        st.write("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                                # --- –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê ---
                                with right_col:
                                    st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ—Ç–µ")
                                    st.metric("–û–±—â–∞—è —Å—É–º–º–∞", format_currency(procurement.get('price')))
                                    st.write(f"**–≠–¢–ü:** {procurement.get('etp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                    st.write(f"**–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {format_date(procurement.get('publish_date'))}")
                                    st.write(f"**–ó–∞–∫–∞–∑—á–∏–∫:** {procurement.get('customer', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {procurement.get('quantity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                                    st.write(f"**–¶–µ–Ω–∞ –∑–∞ –µ–¥.:** {format_currency(procurement.get('price_per_unit'))}")
                                    st.write(f"**–ï–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è:** {procurement.get('unit_of_measurement', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")

                    else:
                        st.info("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
                        st.write("‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
                        st.write("‚Ä¢ –í—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –≠–¢–ü")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
                    st.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
    elif search_button and not search_query.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    
    if not search_query and not search_button:
        st.info("üí° **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–æ–π:**")
        st.write("1. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ —É—Å–ª—É–≥ –≤ –ø–æ–ª–µ –≤—ã—à–µ")
        st.write("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≠–¢–ü")
        st.write("3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–∫—É–ø–∫–∏'")
        st.write("4. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö")

if __name__ == "__main__":
    main() 