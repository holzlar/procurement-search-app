import os
import getpass
import psycopg
import numpy as np
import pandas as pd
import sys
import time
from dotenv import load_dotenv
from supabase import create_client, Client
from sentence_transformers import SentenceTransformer

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
DB_USER = "postgres.vdrykmvkwzuiwouocinh"
DB_HOST = "aws-0-eu-central-1.pooler.supabase.com"
DB_PORT = "5432"
DB_NAME = "postgres"
MODEL_NAME = 'ai-forever/ru-en-RoSBERTa'
# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
SEARCH_FUNCTION_NAME = 'search_procurements_final'
DATA_TABLE_NAME = 'procurement_data_final'

# --- –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ ---
TEST_QUERIES = [
    '–ø–æ–ª–æ—Ç–Ω–æ –æ–±—Ç–∏—Ä–æ—á–Ω–æ–µ –ø–æ–ª–æ—Ç–Ω–æ –±–µ–∑–≤–æ—Ä—Å–æ–≤–æ–µ –∞–≤–µ—Ä—Ñ–æ—Å –∏–ª–∏ —Ö—ç–ª—Ñ–æ—Å –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –æ—Ç –≥–Ω—É—Å–∞ –ø–µ—Ä—á–∞—Ç–∫–∏ —Ö –± —Å –ø–≤—Ö –ø–æ–ª–æ—Ç–Ω–æ –æ–±—Ç–∏—Ä–æ—á–Ω–æ–µ –≤–µ—Ç–æ—à—å —à–∏—Ä–∏–Ω–∞ 140 5 —Å–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å 175 –≥—Ä –º2',
    '–º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏—è –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π —à–ø–∞–ª—ã –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ —à1 —Ä 65 –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ',
    '—ç–ª–µ–∫—Ç—Ä–æ—Ç–æ–≤–∞—Ä—ã',
    '–±–∞–≥–æ—Ä –ø–æ–∂–∞—Ä–Ω—ã–π',
    '—ç–ª–µ–∫—Ç—Ä–æ–¥',
    '—ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä',
    '–∞–≤—Ç–æ–±—É—Å',
    '3d –ø—Ä–∏–Ω—Ç–µ—Ä',
    '–±–µ–Ω–∑–∏–Ω –∞–∏ 92',
    'samsung',
    '–∫–∞—Ä—Ç—Ä–∏–¥–∂'
]

def get_db_connection_string():
    db_password = os.environ.get('DB_PASSWORD') or getpass.getpass("–ü–∞—Ä–æ–ª—å –æ—Ç –ë–î: ")
    if not db_password:
        raise ValueError("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
    return f"postgresql://{DB_USER}:{db_password}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –í–°–ï–ô –±–∞–∑–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≠–¢–ü."""
    print("--- üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –≤—Å–µ–π –±–∞–∑–µ (—Å —Ñ–∏–ª—å—Ç—Ä–æ–º –≠–¢–ü) ---")

    try:
        print("1. –ó–∞–≥—Ä—É–∑–∫–∞ embedding-–º–æ–¥–µ–ª–∏...")
        model = SentenceTransformer(MODEL_NAME, device='cpu')

        conn_string = get_db_connection_string()
        with psycopg.connect(conn_string) as conn:
            with conn.cursor() as cur:
                print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≠–¢–ü –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞...")
                cur.execute(f"SELECT DISTINCT etp FROM {DATA_TABLE_NAME} WHERE etp IS NOT NULL;")
                all_etps = [row[0] for row in cur.fetchall()]
                etps_to_include = [etp for etp in all_etps if etp != 'Goszakup']
                print(f"   - –ò—Å–∫–ª—é—á–∞–µ–º 'Goszakup'. –ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –ø–æ {len(etps_to_include)} –≠–¢–ü.")

                for query in TEST_QUERIES:
                    print("\n" + "="*80)
                    print(f"üîç –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–°: '{query}'")
                    print("="*80)

                    query_embedding = model.encode(query, normalize_embeddings=True)

                    p_match_threshold = 0.5
                    p_match_count = 5
                    p_initial_candidate_count = 20000
                    
                    start_time = time.time()

                    cur.execute(
                        f"SELECT * FROM {SEARCH_FUNCTION_NAME}(%s, %s, %s, %s, %s);",
                        (
                            str(query_embedding.tolist()),
                            p_match_threshold,
                            p_match_count,
                            etps_to_include,
                            p_initial_candidate_count
                        )
                    )

                    results = cur.fetchall()
                    end_time = time.time()
                    duration = end_time - start_time

                    if not results:
                        print("--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ---")
                        print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {duration:.2f} —Å–µ–∫.")
                        continue

                    colnames = [desc[0] for desc in cur.description]
                    df = pd.DataFrame(results, columns=colnames)
                    
                    pd.set_option('display.max_rows', None)
                    pd.set_option('display.max_columns', None)
                    pd.set_option('display.width', 1000)
                    pd.set_option('display.max_colwidth', 60)

                    print(df[['similarity_score', 'best_chunk_text', 'etp', 'publish_date', 'participant_1', 'winner', 'description']].head())
                    print(f"\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {duration:.2f} —Å–µ–∫.")

    except Exception as e:
        print(f"\n--- ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e} ---")

if __name__ == "__main__":
    main() 